import { Runnable, RunnableConfig, RunnableLike } from "@langchain/core/runnables";
import { Pregel } from "../pregel/index.js";
import { BaseCheckpointSaver } from "../checkpoint/base.js";
export declare const END = "__end__";
type EndsMap = {
    [result: string]: string;
};
declare class Branch {
    condition: CallableFunction;
    ends?: EndsMap;
    constructor(condition: CallableFunction, ends?: EndsMap);
    runnable(input: any, options?: {
        config?: RunnableConfig;
    }): Runnable;
}
export declare class Graph<RunInput = any, RunOutput = any> {
    nodes: Record<string, Runnable<RunInput, RunOutput>>;
    edges: Set<[string, string]>;
    branches: Record<string, Branch[]>;
    entryPoint?: string;
    constructor();
    addNode(key: string, action: RunnableLike<RunInput, RunOutput>): void;
    addEdge(startKey: string, endKey: string): void;
    addConditionalEdges(startKey: string, condition: CallableFunction, conditionalEdgeMapping?: Record<string, string>): void;
    setEntryPoint(key: string): void;
    setFinishPoint(key: string): void;
    compile(checkpointer?: BaseCheckpointSaver): Pregel;
    validate(): void;
}
export {};
