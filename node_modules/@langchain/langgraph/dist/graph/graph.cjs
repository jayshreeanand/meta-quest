"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Graph = exports.END = void 0;
const runnables_1 = require("@langchain/core/runnables");
const index_js_1 = require("../pregel/index.cjs");
exports.END = "__end__";
class Branch {
    constructor(condition, ends) {
        Object.defineProperty(this, "condition", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ends", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.condition = condition;
        this.ends = ends;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    runnable(input, options) {
        const result = this.condition(input, options?.config);
        let destination;
        if (this.ends) {
            destination = this.ends[result];
        }
        else {
            destination = result;
        }
        return index_js_1.Channel.writeTo(destination !== exports.END ? `${destination}:inbox` : exports.END);
    }
}
class Graph {
    constructor() {
        Object.defineProperty(this, "nodes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "edges", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "branches", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "entryPoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.nodes = {};
        this.edges = new Set();
        this.branches = {};
    }
    addNode(key, action) {
        if (this.nodes[key]) {
            throw new Error(`Node \`${key}\` already present.`);
        }
        if (key === exports.END) {
            throw new Error(`Node \`${key}\` is reserved.`);
        }
        this.nodes[key] = (0, runnables_1._coerceToRunnable)(action);
    }
    addEdge(startKey, endKey) {
        if (startKey === exports.END) {
            throw new Error("END cannot be a start node");
        }
        if (!this.nodes[startKey]) {
            throw new Error(`Need to addNode \`${startKey}\` first`);
        }
        if (!this.nodes[endKey] && endKey !== exports.END) {
            throw new Error(`Need to addNode \`${endKey}\` first`);
        }
        // TODO: support multiple message passing
        if (Array.from(this.edges).some(([start]) => start === startKey)) {
            throw new Error(`Already found path for ${startKey}`);
        }
        this.edges.add([startKey, endKey]);
    }
    addConditionalEdges(startKey, condition, conditionalEdgeMapping) {
        if (!this.nodes[startKey]) {
            throw new Error(`Need to addNode \`${startKey}\` first`);
        }
        if (condition.constructor.name === "AsyncFunction") {
            throw new Error("Condition cannot be an async function");
        }
        if (conditionalEdgeMapping) {
            const mappingValues = Array.from(Object.values(conditionalEdgeMapping));
            const nodesValues = Object.keys(this.nodes);
            const endExcluded = mappingValues.filter((value) => value !== exports.END);
            const difference = endExcluded.filter((value) => !nodesValues.some((nv) => nv === value));
            if (difference.length > 0) {
                throw new Error(`Missing nodes which are in conditional edge mapping.\nMapping contains possible destinations: ${mappingValues.join(", ")}.\nPossible nodes are ${nodesValues.join(", ")}.`);
            }
        }
        if (!this.branches[startKey]) {
            this.branches[startKey] = [];
        }
        this.branches[startKey].push(new Branch(condition, conditionalEdgeMapping));
    }
    setEntryPoint(key) {
        if (!this.nodes[key]) {
            throw new Error(`Need to addNode \`${key}\` first`);
        }
        this.entryPoint = key;
    }
    setFinishPoint(key) {
        this.addEdge(key, exports.END);
    }
    compile(checkpointer) {
        this.validate();
        const outgoingEdges = {};
        this.edges.forEach(([start, end]) => {
            if (!outgoingEdges[start]) {
                outgoingEdges[start] = [];
            }
            outgoingEdges[start].push(end !== exports.END ? `${end}:inbox` : exports.END);
        });
        const nodes = {};
        for (const [key, node] of Object.entries(this.nodes)) {
            nodes[key] = index_js_1.Channel.subscribeTo(`${key}:inbox`)
                .pipe(node)
                .pipe(index_js_1.Channel.writeTo(key));
        }
        for (const key of Object.keys(this.nodes)) {
            const outgoing = outgoingEdges[key];
            const edgesKey = `${key}:edges`;
            if (outgoing || this.branches[key]) {
                nodes[edgesKey] = index_js_1.Channel.subscribeTo(key, {
                    tags: ["langsmith:hidden"],
                });
            }
            if (outgoing) {
                nodes[edgesKey] = nodes[edgesKey].pipe(index_js_1.Channel.writeTo(...outgoing));
            }
            if (this.branches[key]) {
                this.branches[key].forEach((branch) => {
                    const runnableLambda = new runnables_1.RunnableLambda({
                        func: (input) => branch.runnable(input),
                    });
                    nodes[edgesKey] = nodes[edgesKey].pipe(runnableLambda);
                });
            }
        }
        const hidden = Object.keys(this.nodes).map((node) => `${node}:inbox`);
        if (!this.entryPoint) {
            throw new Error("Entry point not set");
        }
        return new index_js_1.Pregel({
            nodes,
            input: `${this.entryPoint}:inbox`,
            output: exports.END,
            hidden,
            checkpointer,
        });
    }
    validate() {
        const allStarts = new Set([...this.edges].map(([src, _]) => src).concat(Object.keys(this.branches)));
        for (const node of Object.keys(this.nodes)) {
            if (!allStarts.has(node)) {
                throw new Error(`Node \`${node}\` is a dead-end`);
            }
        }
        const allEndsAreDefined = Object.values(this.branches).every((branchList) => branchList.every((branch) => branch.ends !== null));
        if (allEndsAreDefined) {
            const allEnds = new Set([...this.edges]
                .map(([_, end]) => end)
                .concat(...Object.values(this.branches).flatMap((branchList) => branchList.flatMap((branch) => Object.values(branch.ends ?? {}))))
                .concat(this.entryPoint ? [this.entryPoint] : []));
            for (const node of Object.keys(this.nodes)) {
                if (!allEnds.has(node)) {
                    throw new Error(`Node \`${node}\` is not reachable`);
                }
            }
        }
    }
}
exports.Graph = Graph;
