import { Runnable, RunnableConfig } from "@langchain/core/runnables";
import { CallbackManagerForChainRun } from "@langchain/core/callbacks/manager";
import { IterableReadableStream } from "@langchain/core/utils/stream";
import { BaseChannel } from "../channels/base.js";
import { BaseCheckpointSaver } from "../checkpoint/base.js";
import { ChannelBatch, ChannelInvoke } from "./read.js";
import { ChannelWrite } from "./write.js";
export declare class GraphRecursionError extends Error {
    constructor(message?: string);
}
export declare class Channel {
    static subscribeTo(channels: string, options?: {
        key?: string;
        when?: (arg: any) => boolean;
        tags?: string[];
    }): ChannelInvoke;
    static subscribeTo(channels: string[], options?: {
        key?: string;
        when?: (arg: any) => boolean;
        tags?: string[];
    }): ChannelInvoke;
    static subscribeToEach(inbox: string, key?: string): ChannelBatch;
    static writeTo(...args: any[]): ChannelWrite;
}
export interface PregelInterface {
    /**
     * @default {}
     */
    channels?: Record<string, BaseChannel>;
    /**
     * @default "output"
     */
    output?: string | Array<string>;
    /**
     * @default "input"
     */
    input?: string | Array<string>;
    /**
     * @default []
     */
    hidden?: Array<string>;
    /**
     * @default false
     */
    debug?: boolean;
    /**
     * @default []
     */
    interrupt?: string[];
    nodes: Record<string, ChannelInvoke | ChannelBatch>;
    checkpointer?: BaseCheckpointSaver;
    stepTimeout?: number;
}
export interface PregelOptions extends RunnableConfig {
    outputKeys?: string | string[];
}
export type PregelInputType = any;
export type PregelOutputType = any;
export declare class Pregel extends Runnable<PregelInputType, PregelOutputType, PregelOptions> implements PregelInterface {
    static lc_name(): string;
    lc_namespace: string[];
    channels: Record<string, BaseChannel>;
    output: string | Array<string>;
    input: string | Array<string>;
    hidden: Array<string>;
    debug: boolean;
    nodes: Record<string, ChannelInvoke | ChannelBatch>;
    checkpointer?: BaseCheckpointSaver;
    stepTimeout?: number;
    interrupt: string[];
    constructor(fields: PregelInterface);
    _transform(input: AsyncGenerator<PregelInputType>, runManager?: CallbackManagerForChainRun, config?: RunnableConfig & Partial<Record<string, unknown>>): AsyncGenerator<PregelOutputType>;
    invoke(input: PregelInputType, config?: PregelOptions): Promise<PregelOutputType>;
    stream(input: PregelInputType, config?: PregelOptions): Promise<IterableReadableStream<PregelOutputType>>;
    transform(generator: AsyncGenerator<PregelInputType>, config?: PregelOptions): AsyncGenerator<PregelOutputType>;
}
