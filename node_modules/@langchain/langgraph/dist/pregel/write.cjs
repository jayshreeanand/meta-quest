"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelWrite = void 0;
const runnables_1 = require("@langchain/core/runnables");
const constants_js_1 = require("../constants.cjs");
/**
 * Mapping of write channels to Runnables that return the value to be written,
 * or None to skip writing.
 */
class ChannelWrite extends runnables_1.RunnablePassthrough {
    constructor(channels) {
        const name = `ChannelWrite<${channels.map(([chan]) => chan).join(",")}>`;
        super({
            ...{ channels, name },
            func: async (input, config) => this._write(input, config ?? {}),
        });
        Object.defineProperty(this, "channels", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.channels = channels;
    }
    get configSpecs() {
        return [
            {
                id: constants_js_1.CONFIG_KEY_SEND,
                name: constants_js_1.CONFIG_KEY_SEND,
                description: null,
                default: null,
                annotation: "TYPE_SEND",
                isShared: true,
                dependencies: null,
            },
        ];
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async _write(input, config) {
        const values = this.channels.map(async ([chan, r]) => [
            chan,
            r ? await r.invoke(input, config) : input,
        ]);
        let valuesAwaited = await Promise.all(values);
        valuesAwaited = valuesAwaited.filter((write, index) => this.channels[index][1] === null || write[1] !== null);
        ChannelWrite.doWrite(config, Object.fromEntries(valuesAwaited.filter(([_, val], i) => this.channels[i][1] ? Boolean(val) : val)));
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static doWrite(config, values) {
        const write = config.configurable?.[constants_js_1.CONFIG_KEY_SEND];
        write(Object.entries(values));
    }
}
exports.ChannelWrite = ChannelWrite;
