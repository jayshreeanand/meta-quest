import { AgentAction, AgentFinish } from "@langchain/core/agents";
import { BaseMessage } from "@langchain/core/messages";
import { Runnable } from "@langchain/core/runnables";
import { Tool } from "@langchain/core/tools";
import { ToolExecutor } from "./tool_executor.js";
import { StateGraphArgs } from "../graph/state.js";
import { Pregel } from "../pregel/index.js";
type Step = [AgentAction | AgentFinish, string];
interface AgentStateBase {
    agentOutcome?: AgentAction | AgentFinish;
    steps: Array<Step>;
}
export interface AgentExecutorState extends AgentStateBase {
    input: string;
    chatHistory?: BaseMessage[];
}
type AgentChannels<T extends AgentExecutorState> = StateGraphArgs<AgentExecutorState | T>["channels"];
export declare function createAgentExecutor<T extends AgentExecutorState>({ agentRunnable, tools, inputSchema, }: {
    agentRunnable: Runnable;
    tools: Array<Tool> | ToolExecutor;
    inputSchema?: AgentChannels<T>;
}): Pregel;
export {};
