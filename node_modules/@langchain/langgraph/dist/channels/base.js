export class BaseChannel {
}
export class EmptyChannelError extends Error {
    constructor(message) {
        super(message);
        this.name = "EmptyChannelError";
    }
}
export class InvalidUpdateError extends Error {
    constructor(message) {
        super(message);
        this.name = "InvalidUpdateError";
    }
}
export function emptyChannels(channels, checkpoint) {
    const newChannels = {};
    for (const k in channels) {
        if (Object.prototype.hasOwnProperty.call(channels, k)) {
            const channelValue = checkpoint.channelValues[k];
            newChannels[k] = channels[k].empty(channelValue);
        }
    }
    return newChannels;
}
export async function createCheckpoint(checkpoint, channels) {
    const newCheckpoint = {
        v: 1,
        ts: new Date().toISOString(),
        channelValues: { ...checkpoint.channelValues },
        channelVersions: { ...checkpoint.channelVersions },
        versionsSeen: { ...checkpoint.versionsSeen },
    };
    for (const k in channels) {
        if (newCheckpoint.channelValues[k] === undefined) {
            try {
                newCheckpoint.channelValues[k] = await channels[k].checkpoint();
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }
            catch (error) {
                if ("name" in error && error.name === EmptyChannelError.name) {
                    // no-op
                }
                else {
                    throw error; // Rethrow unexpected errors
                }
            }
        }
    }
    return newCheckpoint;
}
