import { RunnableConfig } from "@langchain/core/runnables";
/** A field that can be configured by the user. It is a specification of a field. */
export interface ConfigurableFieldSpec {
    id: string;
    annotation: any;
    name: string | null;
    description: string | null;
    default: any;
    /**
     * @default false
     */
    isShared?: boolean;
    dependencies: Array<string> | null;
}
export interface Checkpoint {
    /**
     * Version number
     */
    v: number;
    /**
     * Timestamp {new Date().toISOString()}
     */
    ts: string;
    /**
     * @default {}
     */
    channelValues: Record<string, any>;
    /**
     * @default {}
     */
    channelVersions: Record<string, number>;
    /**
     * @default {}
     */
    versionsSeen: Record<string, Record<string, number>>;
}
export declare function emptyCheckpoint(): Checkpoint;
export declare const enum CheckpointAt {
    END_OF_STEP = "end_of_step",
    END_OF_RUN = "end_of_run"
}
export declare abstract class BaseCheckpointSaver {
    at: CheckpointAt;
    get configSpecs(): Array<ConfigurableFieldSpec>;
    abstract get(config: RunnableConfig): Checkpoint | undefined;
    abstract put(config: RunnableConfig, checkpoint: Checkpoint): void;
}
